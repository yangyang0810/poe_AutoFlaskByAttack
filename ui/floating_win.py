# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import win32api

from utils.utils import display_image
from src.floating_win_on import floating_win_on
from src.floating_win_off import floating_win_off

class canvas_win(QWidget):
    def __init__(self):
        super().__init__()
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        # self.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents, True)
        #self.setStyleSheet('QWidget {background-color: #FFFFFF; color: #000000;}')

class canvas_label(QLabel):
    def __init__(self, parent, event, is_movingFloating):
        QLabel.__init__(self, parent)
        self.parent = parent
        # self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.BypassWindowManagerHint | QtCore.Qt.Tool | QtCore.Qt.WindowStaysOnTopHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        # self.setAttribute(QtCore.Qt.WA_TransparentForMouseEvents, True)
        self.setStyleSheet('QLabel {background-color: #FFFFFF; color: #000000;}')
        self.event = event
        self.is_movingFloating = is_movingFloating
        self.x = 0
        self.y = 0
        self.dragging = False  # track whether we are dragging

    def mousePressEvent(self, e):
        if e.button() == Qt.LeftButton:
            # Always prepare for drag; click-only will be handled on release
            self.x, self.y = win32api.GetCursorPos()
            self.parent.anchor()
            self.dragging = False

    def mouseMoveEvent(self, e):
        if self.is_movingFloating():
            x, y = win32api.GetCursorPos()
            dx, dy = x - self.x, y - self.y
            if abs(dx) > 0 or abs(dy) > 0:
                self.dragging = True
            self.parent.move2(dx, dy)

    def mouseReleaseEvent(self, e):
        if e.button() == Qt.LeftButton:
            # If not dragged and not in move mode, treat as click to trigger event
            if not self.dragging and not self.is_movingFloating():
                self.event()
            self.dragging = False

class B_form(canvas_win):
    def __init__(self, main):
        super().__init__()
        self.main = main
        self.setWindowTitle("懸浮視窗")
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.BypassWindowManagerHint | QtCore.Qt.Tool | QtCore.Qt.WindowStaysOnTopHint)
        self.resize(100,100)
        self.move(630,948)
        self.label_icon = canvas_label(self, self.main.event.btn_start, self.main.is_movingFloating)
        self.label_icon.setGeometry(QtCore.QRect(0, 0, 100, 100))
        display_image(self.label_icon, floating_win_off)
        self.old_x = 0
        self.old_y = 0

    def anchor(self):
        self.old_x = self.x()
        self.old_y = self.y()        

    def move2(self, x, y):
        self.move(self.old_x + x, self.old_y + y)

    def set_rect(self, x, y, w, h):
        # self.resize(w, h)
        self.move(x, y)

    def showEvent(self, event):
        self.main.detector.catch_self_hWnds()

    def closeEvent(self, event):
        # self.__deleteItemsOfLayout()
        pass

    def set_working(self, working:bool):
        if working:
            display_image(self.label_icon, floating_win_on)
        else:
            display_image(self.label_icon, floating_win_off)